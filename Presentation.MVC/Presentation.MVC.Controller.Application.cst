<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Application" Type="String" Category="Application" Description="Application" %>
<%@ Property Name="Namespace" Type="String" Category="Application" Description="Namespace [using Application.*]" %>

<%@ Property Name="Archetype" Type="XCodeSmith.Archetypes" Category="Context" Description="Controllers Archetype" %>
<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>        
<%@ Import Namespace="System.Data" %>
<%
if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}
      
string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

// DataSource(...)
// orderBy = IsNullOrEmpty(orderBy) ? "<= pkOrderBy >" : orderBy;

string pkParameters = ""; // int? parameter1, string parameter2, ...
string pkParametersArray = ""; // new object[] { parameter1, parameter2, ... };
string pkParametersIsNull = ""; // parameter1 == null || parameter2 == null || ...
string pkPropertiesArray = ""; // new object[] { ClassItemModel.Class.Property1, ClassItemModel.Class.Property2, ... };
// Url.Content(String.Format("~/< %= className % >/Update< %= pkUrl1 % >", < %= pkUrl2 % >)));
string pkUrl1 = ""; // ?Key1={0}&Key2={1}& ...
string pkUrl2 = ""; //  , objectItemModel.Key1, objectItemModel.Key2, ...
// Url.Action("Update", "< %= className % >", new { < %= pkObject % > }, Request.Url.Scheme));
string pkObject = ""; // Key1 = objectItemModel.Key1, Key2 objectItemModel.Key2, ...
int urlIndex = 0;
//string pkPropertiesOrderBy = ""; // Property1, Property2, ...
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    pkParameters += (pkParameters == "" ? "" : ", ") + GetType(column.DataType, false) + " " + LocalName(column.Name);
    pkParametersArray += (pkParametersArray == "" ? "" : ", ") + LocalName(column.Name);
    pkPropertiesArray += (pkPropertiesArray == "" ? "" : ", ") + objectName + "ItemModel." + className + "." + PropertyName(column.Name);
    pkParametersIsNull += (pkParametersIsNull == "" ? "" : " || ") + LocalName(PropertyName(column.Name)) + " == null";
    //pkPropertiesOrderBy += (pkPropertiesOrderBy == "" ? "" : ", ") + PropertyName(column.Name);
    pkUrl1 += (pkUrl1 == "" ? "" : "&") + PropertyName(column.Name) + "={" + urlIndex++.ToString() +"}";
    pkUrl2 += (pkUrl2 == "" ? "" : ", ") + objectName +  "DTO." + PropertyName(column.Name);
    pkObject += (pkObject == "" ? "" : ", ") + PropertyName(column.Name) + " = " + objectName +  "DTO." + PropertyName(column.Name);
}
//if (SourceTable.PrimaryKey.MemberColumns.Count > 1) {
    pkParametersArray = "new object[] { " + pkParametersArray + " }";
    pkPropertiesArray = "new object[] { " + pkPropertiesArray + " }";
//}
//else
//{
//    ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[0];
//    pkParametersArray = "(" + GetType(column.DataType) + ")" + LocalName(PropertyName(column.Name));
//    pkPropertiesArray = objectName + "ItemModel." + className + "." + PropertyName(column.Name);
//}
pkUrl1 = (pkUrl1 == "" ? "" : "?") + pkUrl1;
pkUrl2 = (pkUrl2 == "" ? "" : ", ") + pkUrl2;

string fkArguments = ""; // masterParameter1 = null, masterParameter2 = null, ...
string fkParameters = ""; // int? masterParameter1 = null, string masterParameter2 = null, ...
string fkProperties = ""; // MasterParameter1 = masterParameter1, MasterParameter1 = masterParameter2, ...
foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
    for (int index = 0; index < fkTable.ForeignKeyMemberColumns.Count; index++) {
        string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
        string fkPropertyName = PropertyName(fkTable.ForeignKeyMemberColumns[index].Name);
        string fkLocalName = LocalName(fkTable.ForeignKeyMemberColumns[index].Name);
        string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
        string pkPropertyName = PropertyName(fkTable.PrimaryKeyMemberColumns[index].Name);
        
        fkArguments += (fkArguments == "" ? "" : ", ") + "master" + fkPropertyName;
        fkParameters += (fkParameters == "" ? "" : ", ") + GetType(fkTable.PrimaryKeyMemberColumns[0].DataType, true) + " master" + fkPropertyName + " = null";
        fkProperties += (fkProperties == "" ? "" : ", ") + "Master" + fkPropertyName + " = master" + fkPropertyName;
    }
}
%>
using <%= Application %>.Application;
using <%= Application %>.Data;
using <%= Application %>.Data.Resources;
using EasyLOB;
using EasyLOB.Data;
using EasyLOB.Library.Syncfusion;
using EasyLOB.Mvc;
using Newtonsoft.Json;
using Syncfusion.JavaScript;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Web.Mvc;

namespace <%= Namespace %>
{
    public partial class <%= className %>Controller : BaseMvcControllerSCRUDApplication<<%= className %>DTO, <%= className %>>
    {
        #region Methods

        public <%= className %>Controller(I<%= Application %>GenericApplicationDTO<<%= className %>DTO, <%= className %>> application)
        {
            Application = application;            
        }

        #endregion Methods

        #region Methods SCRUD

        // GET: <%= className %>
        // GET: <%= className %>/Index
        [HttpGet]
        public ActionResult Index(<%= fkParameters %>)
        {
            <%= className %>CollectionModel <%= objectName %>CollectionModel = new <%= className %>CollectionModel(ActivityOperations, "Index", null<%  if (!IsNullOrEmpty(fkArguments)) { %>, <%= fkArguments %><% } %>);

            try
            {
                IsOperation(<%= objectName %>CollectionModel.OperationResult);
            }
            catch (Exception exception)
            {
                <%= objectName %>CollectionModel.OperationResult.ParseException(exception);
            }

            return View(<%= objectName %>CollectionModel);
        }        

        // GET & POST: <%= className %>/Search
        [AcceptVerbs(HttpVerbs.Get | HttpVerbs.Post)]
        public ActionResult Search(string masterControllerAction = null<%  if (!IsNullOrEmpty(fkParameters)) { %>, <% } %><%= fkParameters %>)
        {
            <%= className %>CollectionModel <%= objectName %>CollectionModel = new <%= className %>CollectionModel(ActivityOperations, "Search", masterControllerAction<%  if (!IsNullOrEmpty(fkArguments)) { %>, <%= fkArguments %><% } %>);

            try
            {
                if (IsOperation(<%= objectName %>CollectionModel.OperationResult))
                {
                    return PartialView(<%= objectName %>CollectionModel);
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>CollectionModel.OperationResult.ParseException(exception);
            }

            return JsonResultOperationResult(<%= objectName %>CollectionModel.OperationResult);
        }

        // GET & POST: <%= className %>/Lookup
        [AcceptVerbs(HttpVerbs.Get | HttpVerbs.Post)]
        public ActionResult Lookup(string text, string valueId, List<LookupModelElement> elements = null, string query = null)
        {
            LookupModel lookupModel = new LookupModel(ActivityOperations, text, valueId, elements, query);

            try
            {
                if (IsSearch(lookupModel.OperationResult))
                {
                    return PartialView("_<%= className %>Lookup", lookupModel);
                }
            }
            catch (Exception exception)
            {
                lookupModel.OperationResult.ParseException(exception);
            }

            return null;
        }

        // GET: <%= className %>/Create
        [HttpGet]
        public ActionResult Create(<%= fkParameters %>)
        {
            <%= className %>ItemModel <%= objectName %>ItemModel = new <%= className %>ItemModel(ActivityOperations, "Create"<%  if (!IsNullOrEmpty(fkArguments)) { %>, <%= fkArguments %><% } %>);

            try
            {
                if (IsCreate(<%= objectName %>ItemModel.OperationResult))
                {
                    return PartialView("CRUD", <%= objectName %>ItemModel);
                }            
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }

        // POST: <%= className %>/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<%= className %>ItemModel <%= objectName %>ItemModel)
        {
            try
            {
                if (IsCreate(<%= objectName %>ItemModel.OperationResult))
                {
                    if (IsValid(<%= objectName %>ItemModel.OperationResult, <%= objectName %>ItemModel.<%= className %>))
                    {
                        <%= className %>DTO <%= objectName %>DTO = (<%= className %>DTO)<%= objectName %>ItemModel.<%= className %>.ToDTO();
                        if (Application.Create(<%= objectName %>ItemModel.OperationResult, <%= objectName %>DTO))
                        {
                            if (<%= objectName %>ItemModel.IsSave)
                            {
                                <%= objectName %>ItemModel.OperationResult.StatusMessage =
                                    EasyLOB.Resources.PresentationResources.CreateToUpdate;
                                return JsonResultSuccess(<%= objectName %>ItemModel.OperationResult,
                                    Url.Action("Update", "<%= className %>", new { <%= pkObject %> }, Request.Url.Scheme));
                            }
                            else
                            {
                                return JsonResultSuccess(<%= objectName %>ItemModel.OperationResult);
                            }
                        }
                    }
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }

            <%= objectName %>ItemModel.ActivityOperations = ActivityOperations;

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }

        // GET: <%= className %>/Read/1
        [HttpGet]
        public ActionResult Read(<%= pkParameters %><%= (fkParameters == "" ? "" : ", ") + fkParameters %>)
        {
            <%= className %>ItemModel <%= objectName %>ItemModel = new <%= className %>ItemModel(ActivityOperations, "Read"<%  if (!IsNullOrEmpty(fkArguments)) { %>, <%= fkArguments %><% } %>);
            
            try
            {
                if (IsRead(<%= objectName %>ItemModel.OperationResult))
                {
                    <%= className %>DTO <%= objectName %>DTO = Application.GetById(<%= objectName %>ItemModel.OperationResult, <%= pkParametersArray %>);
                    if (<%= objectName %>DTO != null)
                    {
                        <%= objectName %>ItemModel.<%= className %> = new <%= className %>ViewModel(<%= objectName %>DTO);                    

                        return PartialView("CRUD", <%= objectName %>ItemModel);
                    }
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }            

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }

        // GET: <%= className %>/Update/1
        [HttpGet]
        public ActionResult Update(<%= pkParameters %><%= (fkParameters == "" ? "" : ", ") + fkParameters %>)
        {
            <%= className %>ItemModel <%= objectName %>ItemModel = new <%= className %>ItemModel(ActivityOperations, "Update"<%  if (!IsNullOrEmpty(fkArguments)) { %>, <%= fkArguments %><% } %>);
            
            try
            {
                if (IsUpdate(<%= objectName %>ItemModel.OperationResult))
                {            
                    <%= className %>DTO <%= objectName %>DTO = Application.GetById(<%= objectName %>ItemModel.OperationResult, <%= pkParametersArray %>);
                    if (<%= objectName %>DTO != null)
                    {
                        <%= objectName %>ItemModel.<%= className %> = new <%= className %>ViewModel(<%= objectName %>DTO);

                        return PartialView("CRUD", <%= objectName %>ItemModel);
                    }
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }

        // POST: <%= className %>/Update
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Update(<%= className %>ItemModel <%= objectName %>ItemModel)
        {
            try
            {
                if (IsUpdate(<%= objectName %>ItemModel.OperationResult))
                {
                    if (IsValid(<%= objectName %>ItemModel.OperationResult, <%= objectName %>ItemModel.<%= className %>))
                    {
                        <%= className %>DTO <%= objectName %>DTO = (<%= className %>DTO)<%= objectName %>ItemModel.<%= className %>.ToDTO();
                        if (Application.Update(<%= objectName %>ItemModel.OperationResult, <%= objectName %>DTO))
                        {
                            if (<%= objectName %>ItemModel.IsSave)
                            {
                                return JsonResultSuccess(<%= objectName %>ItemModel.OperationResult,
                                    Url.Action("Update", "<%= className %>", new { <%= pkObject %> }, Request.Url.Scheme));
                            }
                            else
                            {
                                return JsonResultSuccess(<%= objectName %>ItemModel.OperationResult);
                            }
                        }
                    }
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }

            <%= objectName %>ItemModel.ActivityOperations = ActivityOperations;

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }

        // GET: <%= className %>/Delete/1
        [HttpGet]
        public ActionResult Delete(<%= pkParameters %><%= (fkParameters == "" ? "" : ", ") + fkParameters %>)
        {
            <%= className %>ItemModel <%= objectName %>ItemModel = new <%= className %>ItemModel(ActivityOperations, "Delete"<%  if (!IsNullOrEmpty(fkArguments)) { %>, <%= fkArguments %><% } %>);
            
            try
            {
                if (IsDelete(<%= objectName %>ItemModel.OperationResult))
                {            
                    <%= className %>DTO <%= objectName %>DTO = Application.GetById(<%= objectName %>ItemModel.OperationResult, <%= pkParametersArray %>);
                    if (<%= objectName %>DTO != null)
                    {
                        <%= objectName %>ItemModel.<%= className %> = new <%= className %>ViewModel(<%= objectName %>DTO);

                        return PartialView("CRUD", <%= objectName %>ItemModel);
                    }
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }

        // POST: <%= className %>/Delete
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(<%= className %>ItemModel <%= objectName %>ItemModel)
        {
            try
            {
                if (IsDelete(<%= objectName %>ItemModel.OperationResult))
                {
                    if (Application.Delete(<%= objectName %>ItemModel.OperationResult, (<%= className %>DTO)<%= objectName %>ItemModel.<%= className %>.ToDTO()))
                    {
                        return JsonResultSuccess(<%= objectName %>ItemModel.OperationResult);
                    }
                }
            }
            catch (Exception exception)
            {
                <%= objectName %>ItemModel.OperationResult.ParseException(exception);
            }

            <%= objectName %>ItemModel.ActivityOperations = ActivityOperations;

            return JsonResultOperationResult(<%= objectName %>ItemModel.OperationResult);
        }
        
        #endregion Methods SCRUD
        
        #region Methods Syncfusion

        // POST: <%= className %>/DataSource
        [HttpPost]
        public ActionResult DataSource(DataManager dataManager)
        {
            IEnumerable data = new List<<%= className %>ViewModel>();
            int countAll = 0;
            ZOperationResult operationResult = new ZOperationResult();

            if (IsSearch(operationResult))
            {
                try
                {
                    SyncfusionGrid syncfusionGrid = new SyncfusionGrid(typeof(<%= className %>), Application.UnitOfWork.DBMS);
                    ArrayList args = new ArrayList();
                    string where = syncfusionGrid.ToLinqWhere(dataManager.Search, dataManager.Where, args);
                    string orderBy = syncfusionGrid.ToLinqOrderBy(dataManager.Sorted);        
                    int take = (dataManager.Skip == 0 && dataManager.Take == 0) ? AppDefaults.SyncfusionRecordsBySearch : dataManager.Take; // Excel Filtering
                    data = ZViewHelper<<%= className %>ViewModel, <%= className %>DTO, <%= className %>>.ToViewList(Application.Select(operationResult, where, args.ToArray(), orderBy, dataManager.Skip, take));
        
                    if (dataManager.RequiresCounts)
                    {
                        countAll = Application.Count(where, args.ToArray());
                    }
                }
                catch (Exception exception)
                {
                    operationResult.ParseException(exception);
                }
            }

            if (!operationResult.Ok)
            {
                throw new InvalidOperationException(operationResult.Text);
            }

            return Json(JsonConvert.SerializeObject(new { result = data, count = countAll }), JsonRequestBehavior.AllowGet);
        } 

        // POST: <%= className %>/ExportToExcel
        [HttpPost]
        public void ExportToExcel(string gridModel)
        {
            if (IsExport())
            {
                ExportToExcel(gridModel, <%= className %>Resources.EntitySingular + ".xlsx");
            }
        }

        // POST: <%= className %>/ExportToPdf
        [HttpPost]
        public void ExportToPdf(string gridModel)
        {
            if (IsExport())
            {
                ExportToPdf(gridModel, <%= className %>Resources.EntitySingular + ".pdf");
            }
        }

        // POST: <%= className %>/ExportToWord
        [HttpPost]
        public void ExportToWord(string gridModel)
        {
            if (IsExport())
            {
                ExportToWord(gridModel, <%= className %>Resources.EntitySingular + ".docx");
            }
        }
        
        #endregion Methods Syncfusion
    }
}