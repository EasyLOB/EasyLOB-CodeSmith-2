<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Application" Type="String" Category="Application" Description="Application" %>
<%@ Property Name="Namespace" Type="String" Category="Application" Description="Namespace [using Application.*]" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%
if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}
      
string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

string fkIsNotNull = ""; // parameter1 != null || parameter2 != null || ...
foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
    for (int index = 0; index < fkTable.ForeignKeyMemberColumns.Count; index++) {
        string fkPropertyName = PropertyName(fkTable.ForeignKeyMemberColumns[index].Name);
        
        fkIsNotNull += (fkIsNotNull == "" ? "" : " || ") + "Master" + fkPropertyName + " != null";
    }
}
if (fkIsNotNull == "")
{
    fkIsNotNull = "false";
}
%>
using EasyLOB;
using EasyLOB.Mvc;

namespace <%= Namespace %>
{
    public partial class <%= className %>ItemModel : ItemModel
    {
        #region Properties

        public override bool IsMasterDetail
        {
            get { return <%= fkIsNotNull %>; }
        }
<%  string masters = "";
    foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
        string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
        string fkPropertyName = PropertyName(fkTable.ForeignKeyMemberColumns[0].Name);
        string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
        string pkPropertyName = PropertyName(fkTable.PrimaryKeyMemberColumns[0].Name); 

        masters += (masters == "" ? "" : ", ") + GetType(fkTable.PrimaryKeyMemberColumns[0].DataType, true) + " master" + fkPropertyName + " = null"; %>

        public <%= GetType(fkTable.PrimaryKeyMemberColumns[0].DataType, true) %> Master<%= fkPropertyName %> { get; set; }
<%  } %>

        public <%= className %>ViewModel <%= className %> { get; set; }

        #endregion Properties
        
        #region Methods

        public <%= className %>ItemModel()
            : base()
        {
            <%= className %> = new <%= className %>ViewModel();
        }

        public <%= className %>ItemModel(ZActivityOperations activityOperations, string controllerAction<%  if (!IsNullOrEmpty(masters)) { %>, <%= masters %><% } %>, <%= className %>ViewModel <%= objectName %> = null)
            : this()
        {
            ActivityOperations = activityOperations;
            ControllerAction = controllerAction;
<%  foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
        string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
        string fkPropertyName = PropertyName(fkTable.ForeignKeyMemberColumns[0].Name);
        string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
        string pkPropertyName = PropertyName(fkTable.PrimaryKeyMemberColumns[0].Name); %>
            Master<%= fkPropertyName %> = master<%= fkPropertyName %>;
<%  } %>            
            <%= className %> = <%= objectName %> ?? <%= className %>;
        }
        
        #endregion Methods
    }
}
