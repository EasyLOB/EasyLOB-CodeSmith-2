<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Application" Type="String" Category="Application" Description="Application" %>
<%@ Property Name="Namespace" Type="String" Category="Application" Description="Namespace [using Application.*]" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%
if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}
      
string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);
%>
using <%= Namespace.Replace(".Persistence", ".Data") %>;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace <%= Namespace %>
{
    public class <%= className %>Configuration : EntityTypeConfiguration<<%= className %>>
    {
        public <%= className %>Configuration()
        {
            #region Class
            
            this.ToTable("<%= tableName %>");            

<%  if (SourceTable.PrimaryKey.MemberColumns.Count == 1) { %>            
            this.HasKey(x => x.<%= PropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
<%  } else { %>
            this.HasKey(x => new {<%
        string comma = "";
        foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %> <%= comma %>x.<%= PropertyName(column.Name) %><%
            comma = ", ";
        } %> });
<%  } %>

            #endregion Class

            #region Properties
<%  // Properties
    int order = 1;
    foreach (ColumnSchema column in SourceTable.Columns) {
        bool propertyIsPrimaryKey = column.IsPrimaryKeyMember;
        bool propertyIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool propertyIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull; %>        
        
            this.Property(x => x.<%= PropertyName(column.Name) %>)
                .HasColumnName("<%= column.Name %>")
<%      if (propertyIsPrimaryKey && SourceTable.PrimaryKey.MemberColumns.Count > 1) { %>
                .HasColumnOrder(<%= order++.ToString() %>)
<%      } %>                
                .HasColumnType("<%= GetSqlType(column.DataType) %>")<%
        if (propertyIsPrimaryKey && propertyIsIdentity) { %>
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)<%                
        }
        if (IsString(column.DataType)) { 
            string hasMaxLength = column.Size == -1 || IsNText(column) ? 1024.ToString() : column.Size.ToString();
            string hasMaxLengthComment = column.Size == -1 ? " // !?!" : ""; %>
                .HasMaxLength(<%= hasMaxLength %>)<%
        }
        if(!isNullable) { %>
                .IsRequired()<%
        } %>;
<%  } %>

            #endregion Properties
<%  if (SourceTable.ForeignKeys.Count > 0) { %>

            #region Associations (FK)
<%      foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
            
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            pkPropertyName = pkPropertyName == className ? pkPropertyName + fkPropertyName : pkPropertyName;        
                
            bool isNullable = fkColumn.AllowDBNull;
            string pkClassPropertyName = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;

            foreach (ColumnSchema column in fkTable.ForeignKeyMemberColumns) { %>
            
<%              if (isNullable) {%>        
            this.HasOptional(x => x.<%= pkClassPropertyName %>)
<%              } else { %>            
            this.HasRequired(x => x.<%= pkClassPropertyName %>)
<%              } %>            
                .WithMany(x => x.<%= Plural(fkClassName, Culture) %>)
                .HasForeignKey(x => x.<%= fkPropertyName %>);
<%          }
        } %>
        
            #endregion Associations (FK)
<%  } %>
        }
    }
}
