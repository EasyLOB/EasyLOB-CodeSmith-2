<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>
<%@ Property Name="Namespace" Type="String" Category="Context" Description="Namespace [using Namespace]" %>

<%@ Property Name="Database" Type="String" Category="Database" Description="Database [using Namespace.Data.Database]" %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Database" Description="Tables" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
using EasyLOB.Library;
using EasyLOB.Persistence;
using EasyLOB.Security;

namespace <%= Namespace %>
{
    public class <%= Database %>UnitOfWorkRavenDB : UnitOfWorkRavenDB, I<%= Database %>UnitOfWork
    {
        #region Methods

        public <%= Database %>UnitOfWorkRavenDB(IAuthenticationManager authenticationManager)
            : base(ConfigurationHelper.AppSettings<string>("RavenDB.<%= Database %>.Url"), ConfigurationHelper.AppSettings<string>("RavenDB.<%= Database %>.Database"), authenticationManager)
        {           
            Domain = "<%= Database %>";

            //IRavenDatabase database = base.Database;
        }

        public override IGenericRepository<TEntity> GetRepository<TEntity>()
        {
            if (!Repositories.Keys.Contains(typeof(TEntity)))
            {
                var repository = new <%= Database %>GenericRepositoryRavenDB<TEntity>(this);
                Repositories.Add(typeof(TEntity), repository);
            }

            return Repositories[typeof(TEntity)] as IGenericRepository<TEntity>;
        }

        #endregion Methods
    }
}

