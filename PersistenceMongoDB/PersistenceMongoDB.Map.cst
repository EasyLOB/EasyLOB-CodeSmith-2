<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>
<%@ Property Name="Namespace" Type="String" Category="Context" Description="Namespace [using Namespace]" %>

<%@ Property Name="Database" Type="String" Category="Database" Description="Database [using Namespace.Data.Database]" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%

// Associations (FK) => Relationships FK
// Collections (PK)  => Relationships PK

if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}

string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

// LookupProperty
//   2nd property, or 1st if there is no 2nd property
//   1st string property

string lookupProperty = PropertyName((SourceTable.Columns.Count >= 2) ? SourceTable.Columns[1].Name : SourceTable.Columns[0].Name);
foreach (ColumnSchema column in SourceTable.Columns) {
    // First String non-primary-key column
    if (!column.IsPrimaryKeyMember && IsString(column.DataType))    
    {
        // First 
        lookupProperty = PropertyName(column.Name);
        break;
    }
}

// Associations

string associations = "";
string associationKeys = "";
foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
    string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
    ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
    string fkPropertyName = PropertyName(fkColumn.Name);
    
    string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
    ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
    string pkPropertyName = PropertyName(pkColumn.Name);
    
    string pkClassPropertyName = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;
    
    associations += (associations == "" ? " " : ", ") + "\"" + pkClassPropertyName + "\"";

    string associationKey = "";
    foreach(ColumnSchema column in fkTable.PrimaryKeyMemberColumns)
    {
        associationKey += (associationKey == "" ? "" : ", ") + "\"" + PropertyName(column.Name) + "\"";
    }
    associationKeys += (associationKeys == "" ? " " : ", ") + "new string[] { " + associationKey + " }";
}

// Collections

string collections = "";
string collectionKeys = "";
foreach (TableKeySchema primaryKey in SourceTable.PrimaryKeys) {
    string pkClassName = ClassName(primaryKey.ForeignKeyTable.Name, Culture);
    collections += (collections == "" ? " " : ", ") + "\"" + Plural(pkClassName, Culture) + "\"";
    
    string collectionKey = "";
    foreach (ColumnSchema column in primaryKey.PrimaryKeyMemberColumns) {
        collectionKey += (collectionKey == "" ? " " : ", ") + "\"" + column.Name + "\"";
    }    
    collectionKeys += (collectionKeys == "" ? " " : ", ") + "new string[] { " + collectionKey + " }";
}

// IsIdentity

string isIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]) ? "true" : "false";

// KeyProperties

string keys = "";
string keyParameters = "";
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    keys += (keys == "" ? "" : ", ") + "\"" + PropertyName(column.Name) + "\"";
    keyParameters += (keyParameters == "" ? "" : ", ") + GetType(column.DataType, column.AllowDBNull) + " " + ObjectName(column.Name, Culture);
}

// OrderByExpression
//   2nd property, or 1st if there is no 2nd property
//   1st string property

string orderByExpression = PropertyName((SourceTable.Columns.Count >= 2) ? SourceTable.Columns[1].Name : SourceTable.Columns[0].Name);
foreach (ColumnSchema column in SourceTable.Columns) {
    // First String non-primary-key column
    if (!column.IsPrimaryKeyMember && IsString(column.DataType))    
    {
        // First 
        orderByExpression = PropertyName(column.Name);
        break;
    }
}

// NHibernate

bool isNHibernate = true;
string pkEquals = ""; // property1 == object.Property1 && ..
string pkHashCode = ""; // Property1.ToString() + "|" + ...
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    pkEquals += (pkEquals == "" ? "" : " && ") + PropertyName(column.Name) + " == " + objectName + "." + PropertyName(column.Name);
    pkHashCode += (pkHashCode == "" ? "" : " + \"|\" + ") + PropertyName(column.Name) + ".ToString()";
}

string comma;
%>
using <%= Namespace.Replace(".Persistence", ".Data") %>;
using EasyLOB.Persistence;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Serializers;

namespace <%= Namespace %>
{
    public static partial class <%= Database %>MongoDBMap
    {
        public static void <%= className %>Map()
        {
            if (!BsonClassMap.IsClassMapRegistered(typeof(<%= className %>)))
            {            
                BsonClassMap.RegisterClassMap<<%= className %>>(map =>
                {
<%  if (IsIdentity(SourceTable.PrimaryKey.MemberColumns[0])) { %>
                    map.MapIdProperty(x => x.<%= PropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
                        .SetIdGenerator(MongoDBInt32IdGenerator.Instance)
                        .SetSerializer(new StringSerializer(BsonType.String));

<%  } %>
<%  foreach (ColumnSchema column in SourceTable.Columns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull;
        //string protectedSet = column.IsForeignKeyMember ? "protected " : "";
        string protectedSet = ""; %>
                    map.MapProperty(x => x.<%= PropertyName(column.Name) %>);
<%  } %>
                });
            }
        }
    }
}
